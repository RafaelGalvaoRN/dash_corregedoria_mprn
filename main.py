import pandas as pd

from utils_df import *
from utils_graficos import *
from documentacao import textos_documentacao
from utils_pdf import *
from relacao_promotorias import promotoria
from utils_cate import *
from utils_membros import *

st.title("APP - Corregedoria üóÇÔ∏è ")

tab1, tab2, tab3, tab4, tab5 = st.tabs(["Documenta√ß√£o", "Tratador Espec√≠fico c/ Gr√°ficos",
                                        "Tratador M√∫ltiplo e Geral", "Relat√≥rio Cate", "Info Membros"])

with tab1:
    textos_documentacao()

with tab2:
    st.caption("""
             Com este aplicativo, voc√™ ser√° capaz de extrair, transformar e carregar os arquivos com os nomes abaixo:
             \nExtra sem impulsionamento.xlsx
             \nIPs sem Impulsionamento.xlsx
             \nJudi com vista.xlsx
             \nRelat√≥rio FinalJ - NF - PP.xlsx
             \n Caso enviado mais de um arquivo do mesmo tipo, as tabelas ser√£o agrupadas                      
             """)

    uploaded_files = st.file_uploader("Escolha o arquivo", accept_multiple_files=True, key="tab2")

    if uploaded_files:
        seletor = uploaded_files[0].name.lower()

        for processo in uploaded_files:
            lista_dfs = [extract_normalize(processo) for processo in uploaded_files]

        if "extra sem impulsionamento" in seletor:
            lista_df_tratado = [remove_to_classe(processo) for processo in lista_dfs]
            df_merged = pd.concat(lista_df_tratado, axis=0, join="outer", ignore_index=True)


        elif "judi com vista" in seletor:
            lista_df_tratado = [remove_to_classe(processo) for processo in lista_dfs]
            df_merged = pd.concat(lista_df_tratado, axis=0, join="outer", ignore_index=True)


        elif "relat√≥rio extraj" in seletor:
            lista_dfs = [extract_normalize(processo) for processo in uploaded_files]

            functions = [
                remove_nan_columns,
                remove_empty_columns,
                rename_duplicate_columns,
                select_nf_pp_data_in_df,
                remove_to_classe,
                remove_nan_columns,
                normalize_columns
            ]

            lista_df_tratado = [apply_pipeline(df, functions) for df in lista_dfs]
            df_merged = pd.concat(lista_df_tratado, axis=0, join="outer", ignore_index=True)


        elif "ips sem impulsionamento" in seletor:

            functions = [
                remove_to_classe,
                normalize_column_types,
                normalize_columns,
                remove_empty_rows,
                remove_empty_columns,
                extract_last_date,
                filter_df_by_ip
            ]

            lista_df_tratado = [apply_pipeline(df, functions) for df in lista_dfs]
            df_merged = pd.concat(lista_df_tratado, axis=0, join="outer", ignore_index=True)

        show_result = st.checkbox("Show Result", value=True)

        if show_result:
            st.header("Tabela Consolidada üìä")
            st.dataframe(df_merged)

            if "extra sem impulsionamento" in seletor:
                st.header("Tabela Filtrada - extra fora do prazo - sem NF e PP üìä")

                with st.expander("Clique aqui para mais informa√ß√µes sobre os crit√©rios:"):
                    st.markdown("""
                      - **Exclus√µes:** Foram exclu√≠dos da tabela os itens 'NF' e 'PP', uma vez que a pesquisa no EMP j√° traz os extras sem impulsionamento.
                      - **Inclus√£o:** Foi inclu√≠do o 'N√∫mero de Ordem'.
                      - **Filtragem:** A tabela foi filtrada para mostrar apenas 'Ordem', 'N√∫mero de Instaura√ß√£o', 'Prazo Legal'.
                      """)

                colunas = ["classe", "n√∫mero", "prazo legal"]
                functions = [exclude_specific_classes, extract_last_date,
                             lambda df: gerar_dataframe_filtrado(df, colunas), title_case_column]
                df_filtrado = apply_pipeline(df_merged, functions)

                st.dataframe(df_filtrado)

                st.markdown("---")

                functions = [exclude_specific_classes, extract_last_date]
                df_filtrado_grafico = apply_pipeline(df_merged, functions)
                grafico_procedimento_prazos_ultimo_impulsionamento(df_filtrado_grafico)

                st.markdown("---")
                download_table(df_filtrado)

            elif "judi com vista" in seletor:
                st.header("Tabela Filtrada - Judiciais com mais de 60 dias üìä")
                st.write(
                    "Foram excluidos da tabela enviada os Inqu√©ritos Policiais e os processos com menos de 60 dias!")

                colunas = ['procedimento', 'classe', 'assunto', 'data registro', 'dias andamento']
                functions = [normalize_columns, filter_df_by_criteria, lambda df: gerar_dataframe_filtrado(df, colunas),
                             title_case_column]

                df_filtrado = apply_pipeline(df_merged, functions)

                st.dataframe(df_filtrado)

                st.markdown("---")
                grafico_pizza_judiciais(df_filtrado)
                st.markdown("---")
                download_table(df_filtrado)


            elif "relat√≥rio extraj" in seletor:
                st.header("Tabela Filtrada NF | PP fora do prazo üìä")

                with st.expander("Clique aqui para mais informa√ß√µes sobre os crit√©rios:"):
                    st.markdown("""                                    
                                     - **Inclus√£o:** Foi inclu√≠do o 'N√∫mero de Ordem'.
                                     - **Filtragem:** A tabela foi filtrada para mostrar apenas 'Ordem', 'N√∫mero', 'Instaura√ß√£o', '30 dias', '120 dias', 'DENTRO/FORA', 'DIAS/FORA' .
                                     """)

                colunas_corrigir_formato = ['instaura√ß√£o', '30 dias', '120 dias']

                functions = [nf_pp_fora_prazo, gerar_dataframe_filtrado_extra_nf,
                             lambda df: convert_collum_date(df, colunas_corrigir_formato), title_case_column]

                df_filtrado = apply_pipeline(df_merged, functions)
                st.dataframe(df_filtrado)

                st.markdown("---")

                functions = [nf_pp_fora_prazo]
                df_filtrado_grafico = apply_pipeline(df_merged, functions)

                grafico_procedimento_prazos(df_filtrado_grafico)

                st.markdown("---")
                download_table(df_filtrado)

            elif "ips sem impulsionamento" in seletor:
                st.header("Tabela Consolidada üìä")
                st.write(
                    "Foram agrupados todos os arquivos que cont√©m processos policiais sem impulsionamento al√©m do prazo legal!")

                colunas = ['classe', 'n√∫mero', 'assunto']
                functions = [lambda df: gerar_dataframe_filtrado(df, colunas), title_case_column]
                df_filtrado = apply_pipeline(df_merged, functions)
                st.dataframe(df_filtrado)

                st.markdown("---")
                plot_instauracao_per_month(df_merged)
                st.markdown("---")

                plot_ultimo_impulsionamento_per_month(df_merged)
                st.markdown("---")
                totalize_and_plot_by_subject(df_merged)

                st.markdown("---")
                download_table(df_filtrado)

with tab3:
    st.caption("""
                 Com este aplicativo, voc√™ ser√° capaz de enviar m√∫ltiplos arquivos sendo eles tratados e disponibilizados zipados ao final atrav√©s do bot√£o Download  
                 """)

    promotoria_selecionada = st.selectbox("Escolha uma promotoria", promotoria)

    col1, col2 = st.columns(2)

    with col1:
        qtd_acervo_extra = st.number_input("Quantidade de acervo extrajudicial", min_value=0, step=1,
                                           help="Quantidade acervo judicial para c√°lculo de produtividade")

    with col2:
        qtd_acervo_jud = st.number_input("Quantidade de acervo judicial", min_value=0, step=1,
                                         help="Quantidade acervo extrajudicial para c√°lculo de produtividade")

    uploaded_files = st.file_uploader("Escolha o arquivo", accept_multiple_files=True, key="tab3.1")

    if uploaded_files:
        dfs = []
        nomes = []

        for arquivo in uploaded_files:

            nome_arquivo = arquivo.name.lower()
            seletor = arquivo.name.lower()
            df = extract_normalize(arquivo)

            if "extra sem impulsionamento" in seletor:
                lista_df_tratado = remove_to_classe(df)
                df_merged = lista_df_tratado

                colunas = ["classe", "n√∫mero", "prazo legal"]
                functions = [exclude_specific_classes, extract_last_date,
                             lambda df: gerar_dataframe_filtrado(df, colunas), title_case_column]
                df_filtrado = apply_pipeline(df_merged, functions)

                dfs.append(df_filtrado)
                nomes.append(f"{nome_arquivo}_tratado")

            elif "judi com vista" in seletor:
                lista_df_tratado = remove_to_classe(df)
                df_merged = lista_df_tratado

                colunas = ['procedimento', 'classe', 'assunto', 'data registro', 'dias andamento']
                functions = [normalize_columns, filter_df_by_criteria, lambda df: gerar_dataframe_filtrado(df, colunas),
                             title_case_column]

                df_filtrado = apply_pipeline(df_merged, functions)

                dfs.append(df_filtrado)
                nomes.append(f"{nome_arquivo}_tratado")

            elif "relat√≥rio extraj" in seletor:

                functions = [
                    remove_nan_columns,
                    remove_empty_columns,
                    rename_duplicate_columns,
                    select_nf_pp_data_in_df,
                    remove_to_classe,
                    remove_nan_columns,
                    normalize_columns
                ]

                lista_df_tratado = apply_pipeline(df, functions)
                df_merged = lista_df_tratado

                colunas_corrigir_formato = ['instaura√ß√£o', '30 dias', '120 dias']

                functions = [nf_pp_fora_prazo, gerar_dataframe_filtrado_extra_nf,
                             lambda df: convert_collum_date(df, colunas_corrigir_formato), title_case_column]

                df_filtrado = apply_pipeline(df_merged, functions)

                dfs.append(df_filtrado)
                nomes.append(f"{nome_arquivo}_tratado")

            elif "ips sem impulsionamento" in seletor:

                functions = [
                    remove_to_classe,
                    normalize_column_types,
                    normalize_columns,
                    remove_empty_rows,
                    remove_empty_columns,
                    extract_last_date,
                    filter_df_by_ip
                ]

                lista_df_tratado = apply_pipeline(df, functions)
                df_merged = lista_df_tratado

                colunas = ['classe', 'n√∫mero', 'assunto']
                functions = [lambda df: gerar_dataframe_filtrado(df, colunas), title_case_column]
                df_filtrado = apply_pipeline(df_merged, functions)

                dfs.append(df_filtrado)
                nomes.append(f"{nome_arquivo}_tratado")

            st.write("Finalizado tratamento do arquivo", nome_arquivo)

        pdf_path = gerador_relatorio_pdf(dfs,
                                         nomes,
                                         promotoria=promotoria_selecionada,
                                         qtd_acervo_jud=qtd_acervo_jud,
                                         qtd_acervo_extra=qtd_acervo_extra)

        compactar_e_download(dfs, nomes, pdf_path)

with tab4:
    arquivos = cate_extract()
    if arquivos:
        df_unificado = cate_concatena_xlsx(arquivos)
        qtd = st.number_input("Quantidade de Promotorias a serem disponibilizadas no gr√°fico", step=1, min_value=1)
        plotar_solicitacoes_por_unidade(df_unificado, qtd)

        if df_unificado is not None:
            promotorias = cate_get_promotoria(df_unificado)
            promotoria_selecionada = st.selectbox("Selecione a Promotoria", promotorias)
            st.write(f"Promotoria selecionada: {promotoria_selecionada}")

            if promotoria_selecionada:
                df_filtrado = cate_filtra_por_promotoria(df_unificado, promotoria_selecionada)
                st.write(f"DataFrame filtrado pela promotoria {promotoria_selecionada}:")

                df_filtrado = converter_colunas_para_datetime(df_filtrado, ["Data Solicita√ß√£o", "Data Conclus√£o"])

                st.write(df_filtrado)

                df_excel = cate_to_excel(df_filtrado)
                st.download_button(label="Baixar Excel", data=df_excel, file_name='df_filtrado.xlsx',
                                   mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')

with tab5:
    arquivos = membros_pdf_extract()
    if arquivos:

        campos_preencher = []

        for arquivo in arquivos:
            pdf_filename = arquivo.name.lower().strip()

            if "Relat√≥rio de CO.pdf".strip().lower() in pdf_filename:
                ultimo_relatorio_correicao = extract_pdf(arquivo, [("pag_inicial",
                                                                    "RELAT√ìRIO DE CORREI√á√ÉO ORDIN√ÅRIA DE MEMBRO E EM UNIDADE"),
                                                                   ("pag_final", "(assinado eletronicamente)")])

                comparativo_produtividade = extract_pdf(arquivo, [
                    ("pag_inicial", "TABELA 1 - MOVIMENTA√á√ÉO PROCESSUAL (JUDICIAL)"),
                    ("pag_final", "TABELA 4 - ATIVIDADES")
                ])

                # st.write("ultimo_relatorio_correicao")
                # st.write(ultimo_relatorio_correicao)
                #
                # st.write("P√°ginas do Comparativo de Produtividade")
                # st.write(comparativo_produtividade)

                campos_preencher.append((pdf_filename, "√öltimo Relat√≥rio de Correi√ß√£o",
                                         f"fls. {ultimo_relatorio_correicao['pag_inicial']}-{ultimo_relatorio_correicao['pag_final']}"))
                campos_preencher.append((pdf_filename, "Comparativo de Produtividade",
                                         f"fls. {comparativo_produtividade['pag_inicial']}-{comparativo_produtividade['pag_final']}"))

            if "EXTRATO_MERECIMENTO BIZAGI".strip().lower() in pdf_filename:
                bizagi_ficha_15 = extract_pdf(arquivo, [
                    ("pag_inicial", "DEMAIS DADOS/DOCUMENTOS RELEVANTES"),
                    ("pag_final", "FICHA 16 ‚Äì DOCUMENTOS DIVERSOS")
                ])

                # st.write("bizagi_ficha_15")
                # st.write(bizagi_ficha_15)
                campos_preencher.append((pdf_filename, "Bizagi - Ficha 15",
                                         f"fls. {bizagi_ficha_15['pag_inicial']}-{bizagi_ficha_15['pag_final']}"))

                bizagi_ficha_15_16 = extract_pdf(arquivo, [
                    ("pag_inicial", "DEMAIS DADOS/DOCUMENTOS RELEVANTES"),
                    ("pag_final", "FICHA 16 ‚Äì DOCUMENTOS DIVERSOS")
                ])

                # st.write("bizagi_ficha_15_16")
                # st.write(bizagi_ficha_15_16)
                campos_preencher.append((pdf_filename, "Bizagi - Ficha 15 e 16",
                                         f"fls. {bizagi_ficha_15_16['pag_inicial']}-{bizagi_ficha_15_16['pag_final']}"))

                ficha_3 = extract_pdf(arquivo, [
                    ("pag_inicial", "FICHA 3 - INSPE√á√ïES E CORREI√á√ïES"),
                    ("pag_final", "FICHA 5")
                ])

                #
                # st.write("Bizagi - Ficha 3")
                # st.write(ficha_3)
                campos_preencher.append((pdf_filename, "Bizagi - Ficha 3",
                                         f"fls. {ficha_3['pag_inicial']}-{ficha_3['pag_final']}"))

                ficha_6_bizagi = extract_pdf(arquivo, [
                    ("pag_inicial", "FICHA 6 - MUTIR√ïES"),
                    ("pag_final", "FICHA 7")
                ])

                # st.write("ficha_6_bizagi")
                # st.write(ficha_6_bizagi)

                campos_preencher.append((pdf_filename, "Bizagi - Ficha 6",
                                         f"fls. {ficha_6_bizagi['pag_inicial']}-{ficha_6_bizagi['pag_final']}"))

                ficha_11_bizagi = extract_pdf(arquivo, [
                    ("pag_inicial", "FICHA 11 ‚Äì CURSOS DE FORMA√á√ÉO CONTINUADA"),
                    ("pag_final", "FICHA 12")
                ])

                # st.write("ficha_11_bizagi")
                # st.write(ficha_11_bizagi)

                campos_preencher.append((pdf_filename, "Bizagi - Ficha 11",
                                         f"fls. {ficha_11_bizagi['pag_inicial']}-{ficha_11_bizagi['pag_final']}"))



                ficha_12_bizagi = extract_pdf(arquivo, [
                    ("pag_inicial", "FICHA 12 - cursos oficiais diversos"),
                    ("pag_final", "FICHA 13")
                ])

                # st.write("ficha_12_bizagi")
                # st.write(ficha_12_bizagi)

                campos_preencher.append((pdf_filename, "Bizagi - Ficha 12",
                                         f"fls. {ficha_12_bizagi['pag_inicial']}-{ficha_12_bizagi['pag_final']}"))

                ficha_13_bizagi = extract_pdf(arquivo, [
                    ("pag_inicial", "FICHA 13 ‚Äì CURSOS RECONHECIDOS DE APERFEI√áOAMENTO"),
                    ("pag_final", "FICHA 14")
                ])

                # st.write("ficha_13_bizagi")
                # st.write(ficha_13_bizagi)

                campos_preencher.append((pdf_filename, "Bizagi - Ficha 13",
                                         f"fls. {ficha_13_bizagi['pag_inicial']}-{ficha_13_bizagi['pag_final']}"))

                ficha_10_bizagi = extract_pdf(arquivo, [
                    ("pag_inicial", "FICHA 10 ‚Äì ESPECIALIZA√á√ÉO, MESTRADO OU DOUTORADO"),
                    ("pag_final", "FICHA 11")
                ])

                # st.write("ficha_10_bizagi")
                # st.write(ficha_10_bizagi)

                campos_preencher.append((pdf_filename, "Bizagi - Ficha 10",
                                         f"fls. {ficha_10_bizagi['pag_inicial']}-{ficha_10_bizagi['pag_final']}"))

                ficha_8_bizagi = extract_pdf(arquivo, [
                    ("pag_inicial", "FICHA 8 - PUBLICA√á√ïES ACAD√äMICAS"),
                    ("pag_final", "FICHA 9")
                ])

                # st.write("ficha_8_bizagi")
                # st.write(ficha_8_bizagi)

                campos_preencher.append((pdf_filename, "Bizagi - Ficha 8",
                                         f"fls. {ficha_8_bizagi['pag_inicial']}-{ficha_8_bizagi['pag_final']}"))

            if "certid√£o da dcog".strip().lower() in pdf_filename:
                certidao_dcog = extract_pdf(arquivo, [
                    ("pag_inicial", "certid√£o"),
                    ("pag_final", "natal")
                ])
                #
                # st.write("certidao_dcog")
                # st.write(certidao_dcog)

                campos_preencher.append((pdf_filename, "Certid√£o da Diretoria da Corregedoria-Geral",
                                         f"fls. {certidao_dcog['pag_inicial']}-{certidao_dcog['pag_final']}"))

    dados_fixos = {
        'Item': ['1.1.1 Resolutividade (Produtividade e impacto social)',
                 '1.1.2 Presteza',
                 '1.1.3 Pronto Antedimento',
                 '1.1.4 Efici√™ncia',
                 '1.1.5 Organiza√ß√£o e Desempenho das Fun√ß√µes',
                 '1.2.1 Qualidade T√©cnica',
                 '1.2.2 Seguran√ßa',
                 'Participa√ß√£o em Mutir√µes e/ou Sess√µes do J√∫ri',
                 '3.1.1 Cursos de Forma√ß√£o Continuada',
                 '3.1.2 Cursos Oficiais Diversos dos de Forma√ß√£o Continuada e Cursos Reconhecidos de Aperfei√ßoamento',
                 'a) Doutorado (p√≥s-gradua√ß√£o stricto sensu) reconhecido pelo MEC (sem o afastamento previsto no art. 197, inciso III, da Lei Complementar Estadual no 141/1996 c/c Resolu√ß√£o no 004/2008-CSMP).',
                 'b) Mestrado (p√≥s-gradua√ß√£o stricto sensu) reconhecido pelo MEC (sem o afastamento previsto no art. 197, inciso III, da Lei Complementar Estadual no 141/1996 c/c Resolu√ß√£o no 004/2008-CSMP).',
                 'c) Curso de especializa√ß√£o (p√≥s-gradua√ß√£o lato sensu) reconhecido pelo MEC (sem o afastamento',
                 '3.3.1. Publica√ß√µes Acad√™micas',
                 '---',
                 ],

        # 'Informa√ß√µes': [
        #     'Produtividade: √∫ltimo Relat√≥rio de Correi√ß√£o ({{√öltimo Relat√≥rio de Correi√ß√£o}}) e Comparativo atualizado ({{Comparativo de Produtividade}}) \n Impacto Social: Bizagi ‚Äì Ficha 15 ({{Bizagi - Ficha 15}}), √öltimo Relat√≥rio de Correi√ß√£o ({{√öltimo Relat√≥rio de Correi√ß√£o}}) e drive CGMP_RESULTADOS (G:\ Drives compartilhados\ CGMP_RESULTADOS)',
        #     'Fichas 15 e 16 do Bizagi ({{Bizagi - Ficha 15 e 16}}), √öltimo Relat√≥rio de Correi√ß√£o ({{√öltimo Relat√≥rio de Correi√ß√£o}}) e Certid√£o DCOG {{Certid√£o da Diretoria da Corregedoria-Geral}}',
        #     'Certid√£o da DCOG ({{Certid√£o da Diretoria da Corregedoria-Geral}})',
        #     'Ficha 3 ({{Bizagi - Ficha 3}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 3 ({{Bizagi - Ficha 3}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 3 ({{Bizagi - Ficha 3}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 3 ({{Bizagi - Ficha 3}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 6 ({{Bizagi - Ficha 6}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 11 ({{Bizagi - Ficha 11}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 12 ({{Bizagi - Ficha 12}}) e 13 ({{Bizagi - Ficha 13}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 10 ({{Bizagi - Ficha 10}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 10 ({{Bizagi - Ficha 10}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 10 ({{Bizagi - Ficha 10}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'Ficha 8 ({{Bizagi - Ficha 8}}) EXTRATO_MERECIMENTO BIZAGI',
        #     'PENDENTE DE SABER ONDE FICA',
        # ],

        'Informa√ß√µes': [
            'Produtividade: √∫ltimo Relat√≥rio de Correi√ß√£o e Comparativo atualizado \n Impacto Social: Bizagi ‚Äì Ficha 15, √öltimo Relat√≥rio de Correi√ß√£o e drive CGMP_RESULTADOS (G:\ Drives compartilhados\ CGMP_RESULTADOS)',
            'Fichas 15 e 16 do Bizagi, √öltimo Relat√≥rio de Correi√ß√£o e Certid√£o DCOG',
            'Certid√£o da DCOG',
            'Ficha 3 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 3 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 3 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 3 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 6 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 11 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 12 e 13 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 10 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 10 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 10 EXTRATO_MERECIMENTO BIZAGI',
            'Ficha 8 EXTRATO_MERECIMENTO BIZAGI',
            'PENDENTE DE SABER ONDE FICA',
        ],

        'Localiza√ß√£o das Informa√ß√µes': [
            '{{√öltimo Relat√≥rio de Correi√ß√£o}}, {{Comparativo de Produtividade}}, {{Bizagi - Ficha 15}}, {{√öltimo Relat√≥rio de Correi√ß√£o}}',
            '{{Bizagi - Ficha 15 e 16}}, {{√öltimo Relat√≥rio de Correi√ß√£o}} e {{Certid√£o da Diretoria da Corregedoria-Geral}}',
            '{{Certid√£o da Diretoria da Corregedoria-Geral}}',
            '{{Bizagi - Ficha 3}}',
            '{{Bizagi - Ficha 3}}',
            '{{Bizagi - Ficha 3}}',
            '{{Bizagi - Ficha 3}}',
            '{{Bizagi - Ficha 6}}',
            '{{Bizagi - Ficha 11}}',
            '{{Bizagi - Ficha 12}} e {{Bizagi - Ficha 13}}',
            '{{Bizagi - Ficha 10}}',
            '{{Bizagi - Ficha 10}}',
            '{{Bizagi - Ficha 10}}',
            '{{Bizagi - Ficha 8}}',
            'PENDENTE DE SABER ONDE FICA',
        ],


        'Informa√ß√£o Conceito ou Registro Disciplinar': ['', '', '', '', '', '', '', '', '',
                                                        '', '', '', '', '', ''],

        'Observa√ß√µes': [
            'A produtividade √© Avaliada com preval√™ncia dos dados relativos aos doze √∫ltimos meses de efetivo exerc√≠cio a contar da data final do edital do certame, por meio do comparativo da produtividade m√©dia dos membros do Minist√©rio P√∫blico de unidades similares e com atua√ß√£o em of√≠cios de atribui√ß√µes an√°logas. O impacto social da atua√ß√£o ministerial pode ser verificado a partir de registros constantes do √∫ltimo relat√≥rio de correi√ß√£o do membro e das informa√ß√µes constantes da Ficha 15 do extrato funcional.',
            'Avaliada a partir da atua√ß√£o judicial e extrajudicial do membro em √≥rg√£o de execu√ß√£o (Resolu√ß√£o n¬∫ 002/2018‚ÄìCSMP, arts. 11, inciso I, al√≠nea ‚Äúb‚Äù; 11-A e 12), pode ser extra√≠da do √∫ltimo Relat√≥rio de Correi√ß√£o Ordin√°ria, bem como, de dados constantes nas fichas 15 e 16 de seus assentamentos funcionais',
            'Descumprimento de convoca√ß√µes, instru√ß√µes, recomenda√ß√µes e pedidos de informa√ß√£o emanados dos √≥rg√£os da Administra√ß√£o Superior, nos doze √∫ltimos meses de efetivo exerc√≠cio a contar da data final do edital de promo√ß√£o/remo√ß√£o pelo crit√©rio de merecimento.',
            'Medida em raz√£o da atua√ß√£o funcional constante dos assentamentos individuais resultantes do Conceito Geral de sua √∫ltima Correi√ß√£o Ordin√°ria.',
            'Avaliada pelo trabalho desenvolvido na unidade ministerial levando-se em conta o uso eficiente dos recursos humanos e administrativos a seu dispor, estando registrada na √∫ltima Correi√ß√£o Ordin√°ria.',
            'A qualidade t√©cnica dos trabalhos, aferida pela fundamenta√ß√£o jur√≠dica, reda√ß√£o e zelo, √© verific√°vel na √∫ltima visita de Correi√ß√£o Ordin√°ria.',
            'A seguran√ßa, aferida nas manifesta√ß√µes processuais pela ado√ß√£o das provid√™ncias pertinentes, precisas e sem equ√≠vocos, que revelem conhecimento jur√≠dico e certeza no posicionamento que se est√° adotando √© verific√°vel na √∫ltima visita de Correi√ß√£o Ordin√°ria.',
            'N√£o remunerada, quando designada sem preju√≠zo de suas fun√ß√µes, assegurada a '
            'participa√ß√£o de todos quantos manifestarem interesse, pontuada a cada cinquenta processos ou procedimentos e/ou a cada sess√£o do Tribunal do J√∫ri.',
            ' ',
            ' ',
            ' ',
            ' ',
            ' ',
            ' ',
            'N√£o foram localizados nos assentamentos funcionais do(a) interessado(a) registros que maculem sua urbanidade no tratamento dispensado aos cidad√£os, magistrados, advogados, defensores p√∫blicos, partes, servidores e membros do Minist√©rio P√∫blico, bem como sua vida p√∫blica e privada.',

        ]
    }

    if st.button("visualizar"):
        # Convertendo a lista de dados para um DataFrame do Pandas
        df = pd.DataFrame(campos_preencher, columns=["Nome do Arquivo", "Dados", "P√°ginas"])
        st.markdown("## üìã Tabela de Informa√ß√µes e P√°ginas")

        st.table(df)  # Exibe a tabela de maneira agrad√°vel no Streamlit

        # Substituindo os placeholders
        dados_substituidos = substituir_placeholders(dados_fixos, campos_preencher)

        # Convertendo os dados substitu√≠dos em um DataFrame
        df_substituido = pd.DataFrame(dados_substituidos)


        st.markdown("## üìã INFORMA√á√ïES DA CORREGEDORIA GERAL")

        # Exibindo o segundo DataFrame sem √≠ndice
        st.dataframe(df_substituido)

        download_table_direto(df_substituido, "tabela_informa√ß√µes")